{"ast":null,"code":"import _objectSpread from \"C:/Users/waleed/Desktop/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"C:/Users/waleed/Desktop/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"bevelEnabled\", \"bevelSize\", \"bevelThickness\", \"font\", \"height\", \"size\", \"lineHeight\", \"letterSpacing\"];\nimport { ExtrudeGeometry } from \"three\";\nclass TextGeometry extends ExtrudeGeometry {\n  constructor(text) {\n    let parameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n        bevelEnabled = false,\n        bevelSize = 8,\n        bevelThickness = 10,\n        font,\n        height = 50,\n        size = 100,\n        lineHeight = 1,\n        letterSpacing = 0\n      } = parameters,\n      rest = _objectWithoutProperties(parameters, _excluded);\n    if (font === void 0) {\n      super();\n    } else {\n      const shapes = font.generateShapes(text, size, {\n        lineHeight,\n        letterSpacing\n      });\n      super(shapes, _objectSpread(_objectSpread({}, rest), {}, {\n        bevelEnabled,\n        bevelSize,\n        bevelThickness,\n        depth: height\n      }));\n    }\n    this.type = \"TextGeometry\";\n  }\n}\nexport { TextGeometry as TextBufferGeometry, TextGeometry };","map":{"version":3,"names":["TextGeometry","ExtrudeGeometry","constructor","text","parameters","arguments","length","undefined","bevelEnabled","bevelSize","bevelThickness","font","height","size","lineHeight","letterSpacing","rest","_objectWithoutProperties","_excluded","shapes","generateShapes","_objectSpread","depth","type"],"sources":["C:\\Users\\waleed\\Desktop\\node_modules\\src\\geometries\\TextGeometry.ts"],"sourcesContent":["import { ExtrudeGeometry } from 'three'\n\nimport type { Font } from '../loaders/FontLoader'\n\nexport type TextGeometryParameters = {\n  bevelEnabled?: boolean\n  bevelOffset?: number\n  bevelSize?: number\n  bevelThickness?: number\n  curveSegments?: number\n  font: Font\n  height?: number\n  size?: number\n  lineHeight?: number\n  letterSpacing?: number\n}\n\nexport class TextGeometry extends ExtrudeGeometry {\n  constructor(text: string, parameters: TextGeometryParameters = {} as TextGeometryParameters) {\n    const {\n      bevelEnabled = false,\n      bevelSize = 8,\n      bevelThickness = 10,\n      font,\n      height = 50,\n      size = 100,\n      lineHeight = 1,\n      letterSpacing = 0,\n      ...rest\n    } = parameters\n\n    if (font === undefined) {\n      // @ts-ignore\n      super() // generate default extrude geometry\n    } else {\n      const shapes = font.generateShapes(text, size, { lineHeight, letterSpacing })\n      super(shapes, { ...rest, bevelEnabled, bevelSize, bevelThickness, depth: height })\n    }\n    // @ts-ignore\n    this.type = 'TextGeometry'\n  }\n}\n\nexport { TextGeometry as TextBufferGeometry }\n"],"mappings":";;;;AAiBO,MAAMA,YAAA,SAAqBC,eAAA,CAAgB;EAChDC,YAAYC,IAAA,EAAiF;IAAA,IAAnEC,UAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAqC;IACvD;QACJG,YAAA,GAAe;QACfC,SAAA,GAAY;QACZC,cAAA,GAAiB;QACjBC,IAAA;QACAC,MAAA,GAAS;QACTC,IAAA,GAAO;QACPC,UAAA,GAAa;QACbC,aAAA,GAAgB;MAEd,IAAAX,UAAA;MADCY,IAAA,GAAAC,wBAAA,CACDb,UAAA,EAAAc,SAAA;IAEJ,IAAIP,IAAA,KAAS,QAAW;MAEhB;IAAA,OACD;MACC,MAAAQ,MAAA,GAASR,IAAA,CAAKS,cAAA,CAAejB,IAAA,EAAMU,IAAA,EAAM;QAAEC,UAAA;QAAYC;MAAA,CAAe;MACtE,MAAAI,MAAA,EAAAE,aAAA,CAAAA,aAAA,KAAaL,IAAA;QAAMR,YAAA;QAAcC,SAAA;QAAWC,cAAA;QAAgBY,KAAA,EAAOV;MAAA,EAAQ;IACnF;IAEA,KAAKW,IAAA,GAAO;EACd;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}